// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufEx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protobufEx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace leveldbGlog {

namespace {

const ::google::protobuf::Descriptor* Datum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Datum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_protobufEx_2eproto() {
  protobuf_AddDesc_protobufEx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protobufEx.proto");
  GOOGLE_CHECK(file != NULL);
  Datum_descriptor_ = file->message_type(0);
  static const int Datum_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, seq_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, mcg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, gvh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, alm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, mit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, erl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, pox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, vac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, nuc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, label_),
  };
  Datum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Datum_descriptor_,
      Datum::default_instance_,
      Datum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Datum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Datum));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protobufEx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Datum_descriptor_, &Datum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protobufEx_2eproto() {
  delete Datum::default_instance_;
  delete Datum_reflection_;
}

void protobuf_AddDesc_protobufEx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020protobufEx.proto\022\013leveldbGlog\"\220\001\n\005Datu"
    "m\022\020\n\010seq_name\030\001 \002(\t\022\013\n\003mcg\030\002 \002(\002\022\013\n\003gvh\030"
    "\003 \002(\002\022\013\n\003alm\030\004 \002(\002\022\013\n\003mit\030\005 \002(\002\022\013\n\003erl\030\006"
    " \002(\002\022\013\n\003pox\030\007 \002(\002\022\013\n\003vac\030\010 \002(\002\022\013\n\003nuc\030\t "
    "\002(\002\022\r\n\005label\030\n \002(\t", 178);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobufEx.proto", &protobuf_RegisterTypes);
  Datum::default_instance_ = new Datum();
  Datum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protobufEx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protobufEx_2eproto {
  StaticDescriptorInitializer_protobufEx_2eproto() {
    protobuf_AddDesc_protobufEx_2eproto();
  }
} static_descriptor_initializer_protobufEx_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Datum::kSeqNameFieldNumber;
const int Datum::kMcgFieldNumber;
const int Datum::kGvhFieldNumber;
const int Datum::kAlmFieldNumber;
const int Datum::kMitFieldNumber;
const int Datum::kErlFieldNumber;
const int Datum::kPoxFieldNumber;
const int Datum::kVacFieldNumber;
const int Datum::kNucFieldNumber;
const int Datum::kLabelFieldNumber;
#endif  // !_MSC_VER

Datum::Datum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Datum::InitAsDefaultInstance() {
}

Datum::Datum(const Datum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Datum::SharedCtor() {
  _cached_size_ = 0;
  seq_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mcg_ = 0;
  gvh_ = 0;
  alm_ = 0;
  mit_ = 0;
  erl_ = 0;
  pox_ = 0;
  vac_ = 0;
  nuc_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Datum::~Datum() {
  SharedDtor();
}

void Datum::SharedDtor() {
  if (seq_name_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_name_;
  }
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (this != default_instance_) {
  }
}

void Datum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Datum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Datum_descriptor_;
}

const Datum& Datum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protobufEx_2eproto();
  return *default_instance_;
}

Datum* Datum::default_instance_ = NULL;

Datum* Datum::New() const {
  return new Datum;
}

void Datum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seq_name()) {
      if (seq_name_ != &::google::protobuf::internal::kEmptyString) {
        seq_name_->clear();
      }
    }
    mcg_ = 0;
    gvh_ = 0;
    alm_ = 0;
    mit_ = 0;
    erl_ = 0;
    pox_ = 0;
    vac_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nuc_ = 0;
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Datum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seq_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seq_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seq_name().data(), this->seq_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_mcg;
        break;
      }

      // required float mcg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mcg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mcg_)));
          set_has_mcg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_gvh;
        break;
      }

      // required float gvh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gvh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gvh_)));
          set_has_gvh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alm;
        break;
      }

      // required float alm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alm_)));
          set_has_alm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_mit;
        break;
      }

      // required float mit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mit_)));
          set_has_mit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_erl;
        break;
      }

      // required float erl = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_erl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &erl_)));
          set_has_erl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_pox;
        break;
      }

      // required float pox = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pox_)));
          set_has_pox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_vac;
        break;
      }

      // required float vac = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vac_)));
          set_has_vac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_nuc;
        break;
      }

      // required float nuc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_nuc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nuc_)));
          set_has_nuc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_label;
        break;
      }

      // required string label = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Datum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seq_name = 1;
  if (has_seq_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq_name().data(), this->seq_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seq_name(), output);
  }

  // required float mcg = 2;
  if (has_mcg()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mcg(), output);
  }

  // required float gvh = 3;
  if (has_gvh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gvh(), output);
  }

  // required float alm = 4;
  if (has_alm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alm(), output);
  }

  // required float mit = 5;
  if (has_mit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mit(), output);
  }

  // required float erl = 6;
  if (has_erl()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->erl(), output);
  }

  // required float pox = 7;
  if (has_pox()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pox(), output);
  }

  // required float vac = 8;
  if (has_vac()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->vac(), output);
  }

  // required float nuc = 9;
  if (has_nuc()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->nuc(), output);
  }

  // required string label = 10;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->label(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Datum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seq_name = 1;
  if (has_seq_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seq_name().data(), this->seq_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seq_name(), target);
  }

  // required float mcg = 2;
  if (has_mcg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mcg(), target);
  }

  // required float gvh = 3;
  if (has_gvh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gvh(), target);
  }

  // required float alm = 4;
  if (has_alm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alm(), target);
  }

  // required float mit = 5;
  if (has_mit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mit(), target);
  }

  // required float erl = 6;
  if (has_erl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->erl(), target);
  }

  // required float pox = 7;
  if (has_pox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pox(), target);
  }

  // required float vac = 8;
  if (has_vac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->vac(), target);
  }

  // required float nuc = 9;
  if (has_nuc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->nuc(), target);
  }

  // required string label = 10;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->label(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Datum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seq_name = 1;
    if (has_seq_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seq_name());
    }

    // required float mcg = 2;
    if (has_mcg()) {
      total_size += 1 + 4;
    }

    // required float gvh = 3;
    if (has_gvh()) {
      total_size += 1 + 4;
    }

    // required float alm = 4;
    if (has_alm()) {
      total_size += 1 + 4;
    }

    // required float mit = 5;
    if (has_mit()) {
      total_size += 1 + 4;
    }

    // required float erl = 6;
    if (has_erl()) {
      total_size += 1 + 4;
    }

    // required float pox = 7;
    if (has_pox()) {
      total_size += 1 + 4;
    }

    // required float vac = 8;
    if (has_vac()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float nuc = 9;
    if (has_nuc()) {
      total_size += 1 + 4;
    }

    // required string label = 10;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Datum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Datum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Datum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Datum::MergeFrom(const Datum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq_name()) {
      set_seq_name(from.seq_name());
    }
    if (from.has_mcg()) {
      set_mcg(from.mcg());
    }
    if (from.has_gvh()) {
      set_gvh(from.gvh());
    }
    if (from.has_alm()) {
      set_alm(from.alm());
    }
    if (from.has_mit()) {
      set_mit(from.mit());
    }
    if (from.has_erl()) {
      set_erl(from.erl());
    }
    if (from.has_pox()) {
      set_pox(from.pox());
    }
    if (from.has_vac()) {
      set_vac(from.vac());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nuc()) {
      set_nuc(from.nuc());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Datum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datum::CopyFrom(const Datum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datum::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void Datum::Swap(Datum* other) {
  if (other != this) {
    std::swap(seq_name_, other->seq_name_);
    std::swap(mcg_, other->mcg_);
    std::swap(gvh_, other->gvh_);
    std::swap(alm_, other->alm_);
    std::swap(mit_, other->mit_);
    std::swap(erl_, other->erl_);
    std::swap(pox_, other->pox_);
    std::swap(vac_, other->vac_);
    std::swap(nuc_, other->nuc_);
    std::swap(label_, other->label_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Datum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Datum_descriptor_;
  metadata.reflection = Datum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace leveldbGlog

// @@protoc_insertion_point(global_scope)
