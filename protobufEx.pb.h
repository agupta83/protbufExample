// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufEx.proto

#ifndef PROTOBUF_protobufEx_2eproto__INCLUDED
#define PROTOBUF_protobufEx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace leveldbGlog {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobufEx_2eproto();
void protobuf_AssignDesc_protobufEx_2eproto();
void protobuf_ShutdownFile_protobufEx_2eproto();

class Datum;

// ===================================================================

class Datum : public ::google::protobuf::Message {
 public:
  Datum();
  virtual ~Datum();

  Datum(const Datum& from);

  inline Datum& operator=(const Datum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Datum& default_instance();

  void Swap(Datum* other);

  // implements Message ----------------------------------------------

  Datum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Datum& from);
  void MergeFrom(const Datum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string seq_name = 1;
  inline bool has_seq_name() const;
  inline void clear_seq_name();
  static const int kSeqNameFieldNumber = 1;
  inline const ::std::string& seq_name() const;
  inline void set_seq_name(const ::std::string& value);
  inline void set_seq_name(const char* value);
  inline void set_seq_name(const char* value, size_t size);
  inline ::std::string* mutable_seq_name();
  inline ::std::string* release_seq_name();
  inline void set_allocated_seq_name(::std::string* seq_name);

  // required float mcg = 2;
  inline bool has_mcg() const;
  inline void clear_mcg();
  static const int kMcgFieldNumber = 2;
  inline float mcg() const;
  inline void set_mcg(float value);

  // required float gvh = 3;
  inline bool has_gvh() const;
  inline void clear_gvh();
  static const int kGvhFieldNumber = 3;
  inline float gvh() const;
  inline void set_gvh(float value);

  // required float alm = 4;
  inline bool has_alm() const;
  inline void clear_alm();
  static const int kAlmFieldNumber = 4;
  inline float alm() const;
  inline void set_alm(float value);

  // required float mit = 5;
  inline bool has_mit() const;
  inline void clear_mit();
  static const int kMitFieldNumber = 5;
  inline float mit() const;
  inline void set_mit(float value);

  // required float erl = 6;
  inline bool has_erl() const;
  inline void clear_erl();
  static const int kErlFieldNumber = 6;
  inline float erl() const;
  inline void set_erl(float value);

  // required float pox = 7;
  inline bool has_pox() const;
  inline void clear_pox();
  static const int kPoxFieldNumber = 7;
  inline float pox() const;
  inline void set_pox(float value);

  // required float vac = 8;
  inline bool has_vac() const;
  inline void clear_vac();
  static const int kVacFieldNumber = 8;
  inline float vac() const;
  inline void set_vac(float value);

  // required float nuc = 9;
  inline bool has_nuc() const;
  inline void clear_nuc();
  static const int kNucFieldNumber = 9;
  inline float nuc() const;
  inline void set_nuc(float value);

  // required string label = 10;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 10;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // @@protoc_insertion_point(class_scope:leveldbGlog.Datum)
 private:
  inline void set_has_seq_name();
  inline void clear_has_seq_name();
  inline void set_has_mcg();
  inline void clear_has_mcg();
  inline void set_has_gvh();
  inline void clear_has_gvh();
  inline void set_has_alm();
  inline void clear_has_alm();
  inline void set_has_mit();
  inline void clear_has_mit();
  inline void set_has_erl();
  inline void clear_has_erl();
  inline void set_has_pox();
  inline void clear_has_pox();
  inline void set_has_vac();
  inline void clear_has_vac();
  inline void set_has_nuc();
  inline void clear_has_nuc();
  inline void set_has_label();
  inline void clear_has_label();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* seq_name_;
  float mcg_;
  float gvh_;
  float alm_;
  float mit_;
  float erl_;
  float pox_;
  float vac_;
  float nuc_;
  ::std::string* label_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_protobufEx_2eproto();
  friend void protobuf_AssignDesc_protobufEx_2eproto();
  friend void protobuf_ShutdownFile_protobufEx_2eproto();

  void InitAsDefaultInstance();
  static Datum* default_instance_;
};
// ===================================================================


// ===================================================================

// Datum

// required string seq_name = 1;
inline bool Datum::has_seq_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Datum::set_has_seq_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Datum::clear_has_seq_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Datum::clear_seq_name() {
  if (seq_name_ != &::google::protobuf::internal::kEmptyString) {
    seq_name_->clear();
  }
  clear_has_seq_name();
}
inline const ::std::string& Datum::seq_name() const {
  return *seq_name_;
}
inline void Datum::set_seq_name(const ::std::string& value) {
  set_has_seq_name();
  if (seq_name_ == &::google::protobuf::internal::kEmptyString) {
    seq_name_ = new ::std::string;
  }
  seq_name_->assign(value);
}
inline void Datum::set_seq_name(const char* value) {
  set_has_seq_name();
  if (seq_name_ == &::google::protobuf::internal::kEmptyString) {
    seq_name_ = new ::std::string;
  }
  seq_name_->assign(value);
}
inline void Datum::set_seq_name(const char* value, size_t size) {
  set_has_seq_name();
  if (seq_name_ == &::google::protobuf::internal::kEmptyString) {
    seq_name_ = new ::std::string;
  }
  seq_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Datum::mutable_seq_name() {
  set_has_seq_name();
  if (seq_name_ == &::google::protobuf::internal::kEmptyString) {
    seq_name_ = new ::std::string;
  }
  return seq_name_;
}
inline ::std::string* Datum::release_seq_name() {
  clear_has_seq_name();
  if (seq_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seq_name_;
    seq_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Datum::set_allocated_seq_name(::std::string* seq_name) {
  if (seq_name_ != &::google::protobuf::internal::kEmptyString) {
    delete seq_name_;
  }
  if (seq_name) {
    set_has_seq_name();
    seq_name_ = seq_name;
  } else {
    clear_has_seq_name();
    seq_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float mcg = 2;
inline bool Datum::has_mcg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Datum::set_has_mcg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Datum::clear_has_mcg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Datum::clear_mcg() {
  mcg_ = 0;
  clear_has_mcg();
}
inline float Datum::mcg() const {
  return mcg_;
}
inline void Datum::set_mcg(float value) {
  set_has_mcg();
  mcg_ = value;
}

// required float gvh = 3;
inline bool Datum::has_gvh() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Datum::set_has_gvh() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Datum::clear_has_gvh() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Datum::clear_gvh() {
  gvh_ = 0;
  clear_has_gvh();
}
inline float Datum::gvh() const {
  return gvh_;
}
inline void Datum::set_gvh(float value) {
  set_has_gvh();
  gvh_ = value;
}

// required float alm = 4;
inline bool Datum::has_alm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Datum::set_has_alm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Datum::clear_has_alm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Datum::clear_alm() {
  alm_ = 0;
  clear_has_alm();
}
inline float Datum::alm() const {
  return alm_;
}
inline void Datum::set_alm(float value) {
  set_has_alm();
  alm_ = value;
}

// required float mit = 5;
inline bool Datum::has_mit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Datum::set_has_mit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Datum::clear_has_mit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Datum::clear_mit() {
  mit_ = 0;
  clear_has_mit();
}
inline float Datum::mit() const {
  return mit_;
}
inline void Datum::set_mit(float value) {
  set_has_mit();
  mit_ = value;
}

// required float erl = 6;
inline bool Datum::has_erl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Datum::set_has_erl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Datum::clear_has_erl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Datum::clear_erl() {
  erl_ = 0;
  clear_has_erl();
}
inline float Datum::erl() const {
  return erl_;
}
inline void Datum::set_erl(float value) {
  set_has_erl();
  erl_ = value;
}

// required float pox = 7;
inline bool Datum::has_pox() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Datum::set_has_pox() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Datum::clear_has_pox() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Datum::clear_pox() {
  pox_ = 0;
  clear_has_pox();
}
inline float Datum::pox() const {
  return pox_;
}
inline void Datum::set_pox(float value) {
  set_has_pox();
  pox_ = value;
}

// required float vac = 8;
inline bool Datum::has_vac() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Datum::set_has_vac() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Datum::clear_has_vac() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Datum::clear_vac() {
  vac_ = 0;
  clear_has_vac();
}
inline float Datum::vac() const {
  return vac_;
}
inline void Datum::set_vac(float value) {
  set_has_vac();
  vac_ = value;
}

// required float nuc = 9;
inline bool Datum::has_nuc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Datum::set_has_nuc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Datum::clear_has_nuc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Datum::clear_nuc() {
  nuc_ = 0;
  clear_has_nuc();
}
inline float Datum::nuc() const {
  return nuc_;
}
inline void Datum::set_nuc(float value) {
  set_has_nuc();
  nuc_ = value;
}

// required string label = 10;
inline bool Datum::has_label() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Datum::set_has_label() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Datum::clear_has_label() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Datum::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& Datum::label() const {
  return *label_;
}
inline void Datum::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Datum::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void Datum::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Datum::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* Datum::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Datum::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace leveldbGlog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobufEx_2eproto__INCLUDED
